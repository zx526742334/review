/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if (p == null && q == null) {
            return true;
        }
        else if (p == null || q == null) {
            return false;
        }
        
        Deque<TreeNode> s1 = new LinkedList<>();
        Deque<TreeNode> s2 = new LinkedList<>();
        s1.offerFirst(p);
        s2.offerFirst(q);
        
        
        while ((!s1.isEmpty()) && (!s2.isEmpty())) {
            TreeNode cur1 = s1.pollFirst();
            TreeNode cur2 = s2.pollFirst();
            
            if (cur1.val != cur2.val) {
                return false;
            }
            
            // put right node;
            if (cur1.right != null && cur2.right !=  null) {
                s1.offerFirst(cur1.right);
                s2.offerFirst(cur2.right);
            }
            
            if (cur1.right == null ^ cur2.right == null) {
                return false;
            }
            
            
            
            // put left node;
            if (cur1.left != null && cur2.left !=  null) {
                s1.offerFirst(cur1.left);
                s2.offerFirst(cur2.left);
            }
            if (cur1.left == null ^ cur2.left == null){
                return false;
            }
            
            
        }
        
        
        return (s1.isEmpty() && s2.isEmpty());
            
    }
}
