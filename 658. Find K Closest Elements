class Solution {
    public List<Integer> helper(int[] arr, int left, int right) {
        List<Integer> res = new ArrayList<Integer>();
        for (int i = left; i <= right; i++) {
            res.add(arr[i]);
        }
        return res;
    }
    
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        List<Integer> res = new ArrayList<Integer>();
        if (arr == null || arr.length == 0 || k <= 0) {
            return res;
        }
        
        if (k >= arr.length) {
            //return all arr
            return helper(arr, 0, arr.length - 1);
        }

        int left = 0;
        int right = arr.length - 1;
        int mid = left + (right - left) / 2;
        
        // find the closet number of x
        while (left != right - 1) {
            if (arr[mid] == x) {
                left = mid;
                right = mid;
                break;
            }
            else if (arr[mid] < x) {
                left = mid;
                mid = left + (right - left) / 2;
            }
            else {
                right = mid;
                mid = left + (right - left) / 2;
            }
            
        }

        //find the clost k numbers
        while (left > -1 && right < arr.length && right - left < k) {
            if ((x - arr[left]) > (arr[right] - x)) {
                right++;
            }
            else {
                left--;
            }
        }
        
        if (left == -1) {
            return helper(arr, 0, k - 1);
        }
        if (right == arr.length) {
            return helper(arr, arr.length - k, arr.length - 1);
        }
        
        if ((x - arr[left]) > (arr[right] - x)) {
            return helper(arr, left + 1, right);
        }
        else {
            return helper(arr, left, right - 1);
        }
       

    }
}
